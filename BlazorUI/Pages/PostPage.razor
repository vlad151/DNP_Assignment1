@page "/PostPage/{Id}"
@using Entities.Models
@using System.Security.Claims
@using Contracts.Services
@inject IUserService userService
@inject IPostServices postService
@inject NavigationManager navMgr

<NavBar/>

<RadzenCard class="m-3">
    <h3 >@Post.Header</h3>
    <h6 >u/@Post.WrittenBy.username</h6>
    <div >
        <p>@Post.Body</p>
    </div>
    <div style="display: flex">
        <div class="upvoteComponent">
            <img src="img/upvote.png" onclick="@ToggleUpvote" style="display:@(IsUpvoted ? "none" : "block"); cursor: pointer" alt="">
            <img src="img/upvoteOrange.png" onclick="@ToggleUpvote" style="display:@(IsUpvoted ? "block" : "none"); cursor: pointer" alt="">
            <span class="m-2">@Post.countVotes()</span>
            <img src="img/downvote.png" onclick="@ToggleDownvote" style="display:@(IsDownVoted ? "none" : "block") ; cursor: pointer" alt="">
            <img src="img/downvoteBlue.png" onclick="@ToggleDownvote" style="display:@(IsDownVoted ? "block" : "none"); cursor: pointer" alt="">
        </div>
        <label style="color:red">
            @errorLabel
        </label>
        <div class="mt-4 ml-4" style="cursor: pointer">
            <span>@Post.countComments()</span>
            <img src="img/comment.png" alt="">
        </div></div>
</RadzenCard>
<div style="display: flex">
<RadzenTextBox Placeholder="what do you think about this..." @bind-Value="commentBody"  Class="w-100 ml-3" />
 <RadzenButton Class="ml-4 mr-3" Click="@CommentButtonClicked" Text="Comment" />
</div>
<div class="comments">
    @foreach (Comment comment in Post.Comments)
    {
        <CommentComponent Comment="comment"/>
    }
</div>

@code {

    private string commentBody;
    public Post Post;

    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;


    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        user = authState.User;
        isLoggedIn = user.Identity != null;
        Post = await postService.GetPostAsync(Id);
    }

    private bool IsUpvoted { get; set; } = false;
    private bool IsDownVoted { get; set; } = false;
    private string errorLabel;
    private bool isLoggedIn = false;

    private async void ToggleUpvote()
    {
        if (isLoggedIn)
        {
            IsUpvoted = !IsUpvoted;
            if (IsDownVoted)
            {
                IsDownVoted = false;
            }
            try
            {
                User? currentUser = await userService.GetUserAsync(user?.Identity?.Name);

                postService.Upvote(Post.Id, new Vote(1, currentUser));
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            errorLabel = "Error: You must be logged in order to vote";
        }
    }

    private async void ToggleDownvote()
    {
        if (isLoggedIn)
        {
            IsDownVoted = !IsDownVoted;

            IsUpvoted = !IsUpvoted;
            if (IsUpvoted)
            {
                IsUpvoted = false;
            }
            try
            {
                User? currentUser = await userService.GetUserAsync(user?.Identity?.Name);

                postService.Downvote(Post.Id, new Vote(-1, currentUser));
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            errorLabel = "Error: You must be logged in order to vote";
        }
    }

    private async void CommentButtonClicked()
    {
        User? currentUser = await userService.GetUserAsync(user?.Identity?.Name);
        postService.AddComment( Post.Id,new Comment(commentBody, currentUser));
    }

}

